{
  "compilerOptions": {
    "target": "es5",                          /* The rest is delegated to Babel. */
    "module": "esnext",                     /* Required for dynamic imports. */
    "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. Uncommenting this will result in failure because the entyr file (quasar/entry.js) should be TS too  */
    "jsx": "preserve",                     /* JSX is taken care of by Babel. */
    "sourceMap": true,                     /* Generates corresponding '.map' file. */
    "outDir": "./tsc-out",                        /* Redirect output structure to the directory. */
    "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    "strict": true,                           /* Enable all strict type-checking options. */   
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */    
    "typeRoots": [                        /* Required in order to support custom type definitions */
      "./node_modules/@types",
      "./src/@types"
    ],
    "types": [                           /* Type declaration files to be included in compilation. */
      "node"
    ],
    "lib": [
      "es2017",
      "dom"
    ],
    "paths": {                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
        "src/*": ["./src/*"],
        "components/*": ["./src/components/*"],
        "layouts/*": ["./src/layouts/*"],
        "pages/*": ["./src/pages/*"],
        "assets/*": ["./src/assets/*"],
        "plugins/*": ["./src/plugins/*"],
        "router/*": ["./src/router/*"],
        "store/*": ["./src/store/*"]
    },
    "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. Such scenarios like "import Vue from 'vue'" */
    "esModuleInterop": true,                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */

    "skipLibCheck": true,
    /* Decorators support for vue-property-decorator and vue-class-component*/
    "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  },
  "include": [
    "./src"
  ],
  "exclude": [                            /* Prevent node_modules compilation */
    "./node_modules"
  ]
}